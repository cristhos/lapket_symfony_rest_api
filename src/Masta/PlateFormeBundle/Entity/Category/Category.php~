<?php

namespace Masta\PlateFormeBundle\Entity\Category;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use JMS\Serializer\Annotation\Expose;

/**
 * Category
 *
 * @ORM\Table(name="category_categories")
 * @ORM\Entity(repositoryClass="Masta\PlateFormeBundle\Repository\Category\CategoryRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Category
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=30)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="is_published", type="boolean", nullable=true)
     */
    private $isPublished;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="publishedAt", type="datetime")
     */
    private $publishedAt;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="UpdatedAt", type="datetime",nullable=true)
     */
    private $updatedAt;

    /**
     * @var integer
     *
     * @ORM\Column(name="nb_products", type="integer",nullable=true)
     */
    private $nbProduts=0;

    /**
     * @ORM\OneToMany(
     *      targetEntity="Masta\PlateFormeBundle\Entity\Product\Product",
     *      mappedBy="category",
     *      orphanRemoval=true
     * )
     * @ORM\OrderBy({"publishedAt" = "DESC"})
     */
    private $products;

    /**
     * @var integer
     *
     * @ORM\Column(name="nb_followers", type="integer",nullable=true)
     */
    private $nbFollowers;

    /**
     * @ORM\OneToMany(
     *      targetEntity="CategoryFollower",
     *      mappedBy="category",
     *      orphanRemoval=true
     * )
     * @ORM\OrderBy({"publishedAt" = "DESC"})
     */
    private $categoryFollowers;

    /**
     * @ORM\ManyToOne(targetEntity="Masta\PlateFormeBundle\Entity\Stat\Stat", inversedBy="categories")
     */
    private $stat;

    /**
    * @ORM\Column(type="decimal", scale=3)
    */
    protected $rank = 1;

    /**
     * @Expose
     */
    protected $isFollow;
    /**
     * @Expose
     */
    protected $isAuthent;

    public function __construct()
    {
        $this->publishedAt = new \DateTime();
        $this->products = new ArrayCollection();
        $this->categoryFollowers = new ArrayCollection();
    }


    //Verification Function
    public function setIsFollow($isFollow)
    {
        $this->isFollow = $isFollow;
        return $this;
    }
    public function getIsFollow()
    {
        return $this->isFollow;
    }
    public function setIsAuthent($isAuthent)
    {
        $this->isAuthent = $isAuthent;
        return $this;
    }
    public function getIsAuthent()
    {
        return $this->isAuthent;
    }

    public function ranking()
    {
        $nb_total_categories = $this->getStat()->getNbCategories();
        $nb_total_products = $this->getStat()->getNbProducts();
        $nb_total_users = $this->getStat()->getNbUsers();
        
        $nb_followers = $this->getNbFollowers();
        $nb_products = $this->getNbProducts();


        if($nb_total_categories>0)
            $category_probability = 1/$nb_total_categories; 
        else
            $category_probability =0;

        if($nb_products>0)
            $product_probability = 1/$nb_products;
        else
            $product_probability = 0;

        if($nb_total_product)
            $product_fc = $nb_product/$nb_total_products;
        else
            $product_fc=0;

        if($nb_total_users)
            $follower_fc = $nb_followers/$nb_total_users; 
        else
            $follower_fc=0;
         

        $rank = ($product_fc*$product_probability)+($product_fc*$category_probability)+
        ($follower_fc*$product_probability)+($follower_fc*$category_probability);
        return $rank;
    }


    /**
     * toString
     * @return string
     */
    public function __toString()
    {
        return $this->getName();
    }

    /**
     * @ORM\PreUpdate
     * Callback pour mettre à jour la date d'édition à chaque modification de l'entité
     */
    public function updateDate()
    {
        $this->setUpdatedAt(new \Datetime());
        $this->setRank($this->ranking());
    }

    /**
     * @ORM\PrePersist
     */
    public function increase()
    {
      $compteur = $this->getStat()->getCategories()->count();
      $this->getStat()->setNbCategories($compteur+1);
    }
    
    /**
     * @ORM\PreRemove
     */
    public function decrease()
    {
      $compteur = $this->getStat()->getCategories()->count();
      $this->getStat()->setNbCategories($compteur-1);
    }

}
