<?php
namespace Masta\PlateFormeBundle\Entity\Product;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Product
 *
 * @ORM\Table(name="products")
 * @ORM\Entity(repositoryClass="Masta\PlateFormeBundle\Repository\Product\ProductRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Product
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="string", length=255)
     */
    private $description;

    /**
    * @ORM\Column(type="decimal", scale=2)
    */
    protected $price;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="publishedAt", type="datetime")
     */
    private $publishedAt;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="updatedAt", type="datetime",nullable=true)
     */
    private $updatedAt;

    /**
     * @var boolean
     *
     * @ORM\Column(name="is_Expired", type="boolean")
     */
    private $isExpired = false;

    /**
     * @var boolean
     *
     * @ORM\Column(name="is_blocked", type="boolean")
     */
    private $isBlocked = false;


    /**
     * @var integer
     *
     * @ORM\Column(name="nb_votes", type="integer")
     */
    private $nbVotes = 0;

    /**
     * @var integer
     *
     * @ORM\Column(name="nb_Followers", type="integer")
     */
    private $nbFollowers = 0;

    /**
     * @var integer
     *
     * @ORM\Column(name="nb_Conversations", type="integer")
     */
    private $nbConversations = 0;

    /**
     * @var integer
     *
     * @ORM\Column(name="nb_views", type="integer")
     */
    private $nbViews = 0;

    /**
    * @ORM\OneToOne(targetEntity="Masta\PlateFormeBundle\Entity\Picture\Picture",cascade={"persist", "remove"})
    */
    private $picture;


    /**
     * @ORM\OneToMany(
     *      targetEntity="ProductVote",
     *      mappedBy="product",
     *      orphanRemoval=true,
     * )
     * @ORM\OrderBy({"publishedAt" = "DESC"})
     */
    private $votes;

        /**
     * @ORM\OneToMany(
     *      targetEntity="Masta\PlateFormeBundle\Entity\Deal\Conversation",
     *      mappedBy="product",
     *      orphanRemoval=true
     * )
     * @ORM\OrderBy({"publishedAt" = "DESC"})
     */
    private $productConversations;


    /**
     * @ORM\OneToMany(
     *      targetEntity="ProductView",
     *      mappedBy="product",
     *      orphanRemoval=true
     * )
     * @ORM\OrderBy({"publishedAt" = "DESC"})
     */
    private $productViews;


    /**
     * @ORM\ManyToOne(targetEntity="Masta\PlateFormeBundle\Entity\Category\Category", inversedBy="products")
     */
    private $category;

    /**
     * @ORM\ManyToOne(targetEntity="Masta\UserBundle\Entity\User", inversedBy="products")
     */
    protected $author;

    /**
     * @ORM\ManyToOne(targetEntity="Masta\PlateFormeBundle\Entity\Stat\Stat", inversedBy="products")
     */
    private $stat;

    /**
    * @ORM\Column(type="decimal", scale=3)
    */
    protected $rank = 1;

    protected $isAuthor;
    protected $isVoted;
    protected $isFollow;
    protected $isNotify;

    public function __construct()
    {
        $this->publishedAt = new \DateTime();
        $this->updatedAt = new \DateTime();
        $this->votes = new ArrayCollection();
        $this->productViews = new ArrayCollection();
        $this->isBlocked = false;
        //$this->rank = $this->ranking();
    }

    /**
     * @ORM\PreUpdate
     * Callback pour mettre à jour la date d'édition à chaque modification de l'entité
     */
    public function updateDate()
    {
        $this->setUpdatedAt(new \Datetime());
        $this->setRank($this->ranking());
    }

    /**
     * @ORM\PrePersist
     */
    public function increase()
    {
      $compteur = $this->getStat()->getProducts()->count();
      $this->getStat()->setNbProducts($compteur+1);

      $compteur = $this->getAuthor()->getProducts()->count();
      $this->getAuthor()->setNbProducts($compteur+1);
      
      $compteur = $this->getAlbum()->getProducts()->count();
      $this->getAlbum()->setNbProducts($compteur+1);
    }

    /**
     * @ORM\PreRemove
     */
    public function decrease()
    {
      $compteur = $this->getStat()->getProducts()->count();
      $this->getStat()->setNbProducts($compteur-1);

      $compteur = $this->getAuthor()->getProducts()->count();
      $this->getAuthor()->setNbProducts($compteur-1);
      
      $compteur = $this->getAlbum()->getProducts()->count();
      $this->getAlbum()->setNbProducts($compteur-1);
     
    }


     //Verification function
     public function setIsAuthor($isAuthor)
     {
         $this->isAuthor = $isAuthor;
         return $this;
     }
 
     public function getIsAuthor()
     {
         return $this->isAuthor;
     }
  
     public function setIsVoted($isVoted)
     {
         $this->isVoted = $isVoted;
         return $this;
     }
     public function getIsVoted()
     {
         return $this->isVoted;
     }
 
     public function setIsFollow($isFollow)
     {
         $this->isFollow = $isFollow;
         return $this;
     }
     public function getIsFollow()
     {
         return $this->isFollow;
     }
     public function setIsNotify($isNotify)
     {
         $this->isNotify = $isNotify;
         return $this;
     }
     public function getIsNotify()
     {
         return $this->isNotify;
     }
 
     public function ranking()
     {
         $album_rank = $this->getAlbum()->getRank();
         $user_rank = $this->getAuthor()->getRank();

         $nb_total_products = $this->getStat()->getNbProducts();
         $nb_product_views = $this->getNbViews();
         $nb_product_votes = $this->getNbVotes();
         $nb_product_conversations = $this->getNbConversations();
         
         $vote_probability = 1/$nb_product_views;
         $conversation_probability = 1/$nb_product_views;
         $product_probability = 1/$nb_total_products;

         $vote_fc= $nb_product_votes/$nb_product_views;
         $conversation_fc = $nb_product_conversations/$nb_product_views;

        $rank=($vote_fc*$vote_probability)+($conversation_fc*$conversation_probability)+($vote_fc*$album_rank)
              +($vote_fc*$user_rank)+($conversation_fc*$user_rank)+($conversation_fc*$album_rank)+($conversation_fc*$product_probability)+($conversation_fc*$product_probability);
              
        return $rank;
     }

     //end function special
}
